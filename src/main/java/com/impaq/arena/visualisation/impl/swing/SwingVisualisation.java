/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.impaq.arena.visualisation.impl.swing;

import com.impaq.arena.player.Player;
import com.impaq.arena.visualisation.IVisualisation;
import java.lang.reflect.InvocationTargetException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;

/**
 *
 * @author jaro
 */
public class SwingVisualisation extends javax.swing.JFrame implements IVisualisation {

  private Player firstPlayer;
  private Player secondPlayer;

  /**
   * Creates new form SwingVisualisation
   */
  public SwingVisualisation() {
    initComponents();
  }

  public Player getFirstPlayer() {
    return firstPlayer;
  }

  public Player getSecondPlayer() {
    return secondPlayer;
  }

  public void setFirstPlayer(Player firstPlayer) {
    this.firstPlayer = firstPlayer;
  }

  public void setSecondPlayer(Player secondPlayer) {
    this.secondPlayer = secondPlayer;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

    firstPlayerPanel = new com.impaq.arena.visualisation.impl.swing.PlayerInfo();
    secondPlayerPanel = new com.impaq.arena.visualisation.impl.swing.PlayerInfo();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setAlwaysOnTop(true);
    setName("ImaqArena"); // NOI18N
    setResizable(false);
    setState(2);

    org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${firstPlayer}"), firstPlayerPanel, org.jdesktop.beansbinding.BeanProperty.create("player"));
    bindingGroup.addBinding(binding);

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${secondPlayer}"), secondPlayerPanel, org.jdesktop.beansbinding.BeanProperty.create("player"));
    bindingGroup.addBinding(binding);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(24, 24, 24)
        .addComponent(firstPlayerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 287, Short.MAX_VALUE)
        .addComponent(secondPlayerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(secondPlayerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(firstPlayerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(277, Short.MAX_VALUE))
    );

    bindingGroup.bind();

    pack();
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private com.impaq.arena.visualisation.impl.swing.PlayerInfo firstPlayerPanel;
  private com.impaq.arena.visualisation.impl.swing.PlayerInfo secondPlayerPanel;
  private org.jdesktop.beansbinding.BindingGroup bindingGroup;
  // End of variables declaration//GEN-END:variables
  public void FirstPlayerWin() {
    close();
  }

  public void SecondPlayerWin() {
    close();
  }

  public void Refresh(final Player firstPlayer, final Player secondPlayer) {
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        setFirstPlayer(firstPlayer);
        setSecondPlayer(secondPlayer);
        
      }
    });

  }

  public void RoundInfo(int roundNumber, boolean isFistPlayerActive) {
  }

  public void StartGame() {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(SwingVisualisation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(SwingVisualisation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(SwingVisualisation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(SwingVisualisation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new SwingVisualisation().setVisible(true);
      }
    });
  }

  public void KillWizards(int wizardsStrength, boolean firstPlayerAction) {
  }

  public void KillWarriors(int wizardsStrength, boolean firstPlayerAction) {
  }

  public void KillBuilders(int wizardsStrength, boolean firstPlayerAction) {
  }

  public void DestroyCastle(int warriorsStrength, boolean firstPlayerAction) {
  }

  public void BuildCastle(int buildersProductivity, boolean firstPlayerAction) {
  }

  public void AddBuilders(int count, boolean firstPlayerAction) {
  }

  public void AddWizards(int count, boolean firstPlayerAction) {
  }

  public void AddWarriors(int count, boolean firstPlayerAction) {
  }

  public void CheckCastleHeight(boolean firstPlayerAction) {
  }

  public void CheckWarriorCount(boolean firstPlayerAction) {
  }

  public void CheckWizardCount(boolean firstPlayerAction) {
  }

  public void CheckBuildersCount(boolean firstPlayerAction) {
  }

  private void close() {
    try {
      SwingUtilities.invokeAndWait(new Runnable() {
        public void run() {
          dispose();
        }
      });
    } catch (InterruptedException ex) {
    } catch (InvocationTargetException ex) {
    }
  }
}